{"version":3,"sources":["components/WatchParty.js","App.js","serviceWorker.js","index.js"],"names":["StartParty","useState","isStart","setIsStart","partyUrl","setPartyUrl","tabUrl","setTabUrl","tabId","setTabId","urlTextArea","useRef","useEffect","window","chrome","tabs","query","active","currentWindow","activeTab","url","URLSearchParams","get","id","console","log","ref","value","onClick","current","select","document","execCommand","searchVariables","URL","searchParams","delete","searchList","key","push","newUrl","split","join","update","showId","pathname","filter","section","sessionId","String","Math","round","Date","valueOf","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6LAGe,SAASA,IAAc,IAAD,EAELC,oBAAS,GAFJ,mBAE5BC,EAF4B,KAEnBC,EAFmB,OAGHF,mBAAS,IAHN,mBAG5BG,EAH4B,KAGlBC,EAHkB,OAIPJ,mBAAS,IAJF,mBAI5BK,EAJ4B,KAIpBC,EAJoB,OAKTN,mBAAS,MALA,mBAK5BO,EAL4B,KAKrBC,EALqB,KAM3BC,EAAcC,iBAAO,MAE3BC,qBAAU,WACNC,OAAOC,OAAOC,KAAKC,MAAM,CAACC,QAAQ,EAAMC,eAAe,IAAO,SAASH,GACnE,IAAII,EAAYJ,EAAK,GACrBR,EAAUY,EAAUC,KACF,IAAIC,gBAAgBF,EAAUC,KAEtBE,IAAI,eAE1BnB,GAAW,GACXE,EAAYc,EAAUC,KACtBX,EAASU,EAAUI,UAG5B,IAmCH,OAFAC,QAAQC,IAAIvB,GAEPA,EAQG,6BACI,yDACA,6BACI,8BAAUwB,IAAKhB,EAAaiB,MAAOvB,IACnC,4BAAQwB,QAhCR,WACZlB,EAAYmB,QAAQC,SACpBC,SAASC,YAAY,UA8BT,UAEJ,6BACI,4BAAQJ,QA9BJ,WAChB,IACIK,EADM,IAAIC,IAAI5B,GACQ6B,aAC1BF,EAAgBG,OAAO,aACvB,IAJsB,EAIlBC,EAAa,GAJK,cAKKJ,GALL,IAKtB,2BAA4C,CAAC,IAAD,yBAAhCK,EAAgC,KAA3BX,EAA2B,KACxCU,EAAWE,KAAKD,EAAM,IAAMX,IANV,8BAQtB,IAAIa,EAASlC,EAAOmC,MAAM,KAAK,GAAK,IAAMJ,EAAWK,KAAK,KAC1D7B,OAAOC,OAAOC,KAAK4B,OAAOnC,EAAO,CAACY,IAAKoB,IACvCrC,GAAW,KAoBC,kBAbR,6BACI,4BAAQyB,QApCI,WACpB,IACIgB,EADM,IAAIV,IAAI5B,GACDuC,SAASJ,MAAM,KAAKK,QAAO,SAAAC,GAAO,MAAgB,KAAZA,KAAgB,GACnEC,EAAYC,OAAOL,GAAU,IAAMK,OAAOC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,MAE5Eb,EAASlC,EAAS,cAAgB0C,EAEtCnC,OAAOC,OAAOC,KAAK4B,OAAOnC,EAAO,CAACY,IAAKoB,IAEvCnC,EAAYmC,GACZrC,GAAW,KA0BH,mBC7CDmD,MAbf,WAEE,OACE,6BACE,wDACA,8DACA,6BACE,kBAAC,EAAD,SCCYC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.0a976c72.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\n\nexport default function StartParty() {\n\n    let [isStart, setIsStart] = useState(false);\n    let [partyUrl, setPartyUrl] = useState(\"\");\n    let [tabUrl, setTabUrl] = useState(\"\");\n    let [tabId, setTabId] = useState(null)\n    const urlTextArea = useRef(null);\n\n    useEffect(() => {\n        window.chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n            let activeTab = tabs[0];\n            setTabUrl(activeTab.url);\n            const urlParams = new URLSearchParams(activeTab.url);\n            \n            let wpSession = urlParams.get(\"wpSession\");\n            if (wpSession) {\n                setIsStart(true);\n                setPartyUrl(activeTab.url);\n                setTabId(activeTab.id);\n            }\n         });\n    }, [])\n\n    const generateSession = () => {\n        let url = new URL(tabUrl);\n        let showId = url.pathname.split(\"/\").filter(section => section !== \"\")[1];\n        let sessionId = String(showId) + \"-\" + String(Math.round(new Date().valueOf() / 1000));\n\n        let newUrl = tabUrl + \"&wpSession=\" + sessionId;\n\n        window.chrome.tabs.update(tabId, {url: newUrl });\n\n        setPartyUrl(newUrl);\n        setIsStart(true);\n    }\n\n    const copyUrl = () => {\n        urlTextArea.current.select();\n        document.execCommand('copy');\n    }\n\n    const stopSession = () => {\n        let url = new URL(tabUrl);\n        let searchVariables = url.searchParams;\n        searchVariables.delete(\"wpSession\");\n        let searchList = [];\n        for (const [key, value] of searchVariables) {\n            searchList.push(key + \"=\" + value);\n        }\n        let newUrl = tabUrl.split(\"?\")[0] + \"?\" + searchList.join(\"&\");\n        window.chrome.tabs.update(tabId, {url: newUrl });\n        setIsStart(false);\n    }\n\n    console.log(isStart);\n\n    if (!isStart) {\n        return (\n            <div>\n                <button onClick={generateSession}>Start a party!</button>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <h3>There is a party started!</h3>\n                <div>\n                    <textarea ref={urlTextArea} value={partyUrl}></textarea>\n                    <button onClick={copyUrl}>Copy!</button>\n                </div>\n                <div>\n                    <button onClick={stopSession}>Stop session</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport WatchParty from './components/WatchParty';\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>Welcome to CrunchyParty!</h1>\n      <h3>Watch anime with your friends!</h3>\n      <div>\n        <WatchParty />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}